package leetcode.hash;

/**
 * @author huangqian
 * @version 1.0.0
 * @time 2020/6/11 - 11:41
 * @description: 36. 有效的数独
 * <pre>
 * 判断一个 9x9 的数独是否有效。只需要根据以下规则，验证已经填入的数字是否有效即可。
 *
 * 数字 1-9 在每一行只能出现一次。
 * 数字 1-9 在每一列只能出现一次。
 * 数字 1-9 在每一个以粗实线分隔的 3x3 宫内只能出现一次。
 *
 *
 * 上图是一个部分填充的有效的数独。
 *
 * 数独部分空格内已填入了数字，空白格用 '.' 表示。
 *
 * 示例 1:
 *
 * 输入:
 * [
 *   ["5","3",".",".","7",".",".",".","."],
 *   ["6",".",".","1","9","5",".",".","."],
 *   [".","9","8",".",".",".",".","6","."],
 *   ["8",".",".",".","6",".",".",".","3"],
 *   ["4",".",".","8",".","3",".",".","1"],
 *   ["7",".",".",".","2",".",".",".","6"],
 *   [".","6",".",".",".",".","2","8","."],
 *   [".",".",".","4","1","9",".",".","5"],
 *   [".",".",".",".","8",".",".","7","9"]
 * ]
 * 输出: true
 * 示例 2:
 *
 * 输入:
 * [
 *   ["8","3",".",".","7",".",".",".","."],
 *   ["6",".",".","1","9","5",".",".","."],
 *   [".","9","8",".",".",".",".","6","."],
 *   ["8",".",".",".","6",".",".",".","3"],
 *   ["4",".",".","8",".","3",".",".","1"],
 *   ["7",".",".",".","2",".",".",".","6"],
 *   [".","6",".",".",".",".","2","8","."],
 *   [".",".",".","4","1","9",".",".","5"],
 *   [".",".",".",".","8",".",".","7","9"]
 * ]
 * 输出: false
 * 解释: 除了第一行的第一个数字从 5 改为 8 以外，空格内其他数字均与 示例1 相同。
 *      但由于位于左上角的 3x3 宫内有两个 8 存在, 因此这个数独是无效的。
 * 说明:
 *
 * 一个有效的数独（部分已被填充）不一定是可解的。
 * 只需要根据以上规则，验证已经填入的数字是否有效即可。
 * 给定数独序列只包含数字 1-9 和字符 '.' 。
 * 给定数独永远是 9x9 形式的。
 *
 * 来源：力扣（LeetCode）
 * 链接：https://leetcode-cn.com/problems/valid-sudoku
 * </pre>
 */
public class ValidSudoku {

    public boolean isValidSudoku(char[][] board) {

        if (board == null || board.length != 9) return false;

        int[] map = new int[9];
        for (int row = 0; row < 9; row++) {

            //不是9X9的看板，不合法
            if (board[row] == null || board[row].length != 9) return false;

            for (int column = 0; column < 9; column++) {
                int key = board[row][column] - '1';
                //验证数字是否合法
                if (key >= 0 && key <= 8) {

                    int index = (1 << column)               //最低9位存储列编号
                            | (1 << (row + 9))              //中间9位存放行号
                            | (1 << (column / 3 + row / 3 * 3 + 18)); //z为宫格区域内序号
                    int old = map[key];
                    if ((old & index) == 0) { //无重复，则按位或，加入位集合
                        map[key] = old | index;
                    } else { //有重复
                        return false;
                    }
                }
            }
        }
        return true;
    }
}
